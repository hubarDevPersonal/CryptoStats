// Code generated by goa v3.6.0, DO NOT EDIT.
//
// rate HTTP client encoders and decoders
//
// Command:
// $ goa gen CryptoStats/api/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strconv"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildRateRequest instantiates a HTTP request object with method and path set
// to call the "rate" service "rate" endpoint
func (c *Client) BuildRateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RateRatePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("rate", "rate", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeRateResponse returns a decoder for responses returned by the rate rate
// endpoint. restoreBody controls whether the response body should be restored
// after having been read.
func DecodeRateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				contentType   string
				contentLength *int
				err           error
			)
			contentTypeRaw := resp.Header.Get("Content-Type")
			if contentTypeRaw != "" {
				contentType = contentTypeRaw
			} else {
				contentType = "application/json"
			}
			{
				contentLengthRaw := resp.Header.Get("Content-Length")
				if contentLengthRaw != "" {
					v, err2 := strconv.ParseInt(contentLengthRaw, 10, strconv.IntSize)
					if err2 != nil {
						err = goa.MergeErrors(err, goa.InvalidFieldTypeError("contentLength", contentLengthRaw, "integer"))
					}
					pv := int(v)
					contentLength = &pv
				}
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("rate", "rate", err)
			}
			res := NewRateCustomJSONResponseOK(contentType, contentLength)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("rate", "rate", resp.StatusCode, string(body))
		}
	}
}
