// Code generated by goa v3.6.0, DO NOT EDIT.
//
// rate endpoints
//
// Command:
// $ goa gen CryptoStats/api/design

package rate

import (
	"context"
	"io"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "rate" service endpoints.
type Endpoints struct {
	Rate goa.Endpoint
}

// RateResponseData holds both the result and the HTTP response body reader of
// the "rate" method.
type RateResponseData struct {
	// Result is the method result.
	Result *CustomJSONResponse
	// Body streams the HTTP response body.
	Body io.ReadCloser
}

// NewEndpoints wraps the methods of the "rate" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Rate: NewRateEndpoint(s),
	}
}

// Use applies the given middleware to all the "rate" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Rate = m(e.Rate)
}

// NewRateEndpoint returns an endpoint function that calls the method "rate" of
// service "rate".
func NewRateEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		res, body, err := s.Rate(ctx)
		if err != nil {
			return nil, err
		}
		return &RateResponseData{Result: res, Body: body}, nil
	}
}
